# Code Case 4
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder

# Generating synthetic data for Omega-3 Supplementation
np.random.seed(42)
n_samples = 1000

# Synthetic patient data
age = np.random.randint(20, 80, n_samples)
genetic_marker = np.random.choice(['AA', 'AG', 'GG'], n_samples)
dietary_habits = np.random.choice(['Vegetarian', 'Non-Vegetarian', 'Vegan'], n_samples)
baseline_omega3 = np.random.uniform(1, 5, n_samples)  # g/day

# Supplement response based on individual factors
response = baseline_omega3 + (np.random.uniform(1, 3, n_samples) * (age / 50)) + np.random.normal(0, 0.5, n_samples)

# Creating DataFrame
df_omega3 = pd.DataFrame({
    'Age': age,
    'GeneticMarker': genetic_marker,
    'DietaryHabits': dietary_habits,
    'BaselineOmega3': baseline_omega3,
    'Response': response
})

# Encoding categorical variables
encoder = OneHotEncoder()
encoded_cats = encoder.fit_transform(df_omega3[['GeneticMarker', 'DietaryHabits']]).toarray()
encoded_df = pd.DataFrame(encoded_cats, columns=encoder.get_feature_names_out(['GeneticMarker', 'DietaryHabits']))
df_omega3_encoded = pd.concat([df_omega3.drop(['GeneticMarker', 'DietaryHabits'], axis=1), encoded_df], axis=1)

# Splitting data for training and testing
X = df_omega3_encoded.drop('Response', axis=1)
y = df_omega3_encoded['Response']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Training a machine learning model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predicting and evaluating
predictions = model.predict(X_test)
results = pd.DataFrame({'Actual': y_test, 'Predicted': predictions})
results = results.reset_index(drop=True)

# Add 'Age' and 'BaselineOmega3' to results for visualization
results['Age'] = X_test.reset_index(drop=True)['Age']
results['BaselineOmega3'] = X_test.reset_index(drop=True)['BaselineOmega3']

# Visualization
plt.figure(figsize=(14, 8))
sns.scatterplot(x='Actual', y='Predicted', hue='Age', size='BaselineOmega3', sizes=(20, 200), data=results, palette='coolwarm')
plt.plot([results['Actual'].min(), results['Actual'].max()], [results['Actual'].min(), results['Actual'].max()], 'r--')
plt.title('Actual vs Predicted Omega-3 Supplement Response')
plt.xlabel('Actual Response')
plt.ylabel('Predicted Response')
plt.legend(title='Age and Baseline Omega-3')
plt.show()
